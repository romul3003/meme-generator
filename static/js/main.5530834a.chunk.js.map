{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","src","alt","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","assertThisInitialized","handleSubmit","_this2","fetch","then","response","json","memes","data","setState","event","_event$target","target","name","value","defineProperty","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","type","placeholder","onChange","align","Component","App","src_Header","src_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mMAceA,MAZf,WACI,OACCC,EAAAC,EAAAC,cAAA,cACDF,EAAAC,EAAAC,cAAA,OACCC,IAAI,iEACJC,IAAI,aAELJ,EAAAC,EAAAC,cAAA,8EC8DWG,cApEd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACZC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEdX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IACpBA,EAAKe,aAAef,EAAKe,aAAaF,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IATPA,mFAYM,IAAAgB,EAAAb,KACnBc,MAAM,qCACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAY,IACVE,EAASF,EAASG,KAAlBD,MACPL,EAAKO,SAAS,CAACZ,YAAaU,2CAMlBG,GAAO,IAAAC,EACGD,EAAME,OAArBC,EADYF,EACZE,KAAMC,EADMH,EACNG,MACbzB,KAAKoB,SAALtB,OAAA4B,EAAA,EAAA5B,CAAA,GAAiB0B,EAAOC,yCAGZJ,GACZA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW/B,KAAKI,MAAMI,YAAYwB,QAC5DC,EAAcjC,KAAKI,MAAMI,YAAYoB,GAASM,IACpDlC,KAAKoB,SAAS,CAACb,UAAW0B,qCAI1B,OACC1C,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,QAAM0C,UAAU,YAAYC,SAAUpC,KAAKY,cAC1CrB,EAAAC,EAAAC,cAAA,SACC4C,KAAK,OACLb,KAAK,UACLC,MAAOzB,KAAKI,MAAMC,QAClBiC,YAAY,WACZC,SAAUvC,KAAKS,eAGhBlB,EAAAC,EAAAC,cAAA,SACC4C,KAAK,OACLb,KAAK,aACLC,MAAOzB,KAAKI,MAAME,WAClBgC,YAAY,cACZC,SAAUvC,KAAKS,eAGhBlB,EAAAC,EAAAC,cAAA,sBAGDF,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,QACd5C,EAAAC,EAAAC,cAAA,OAAK+C,MAAM,SAAS9C,IAAKM,KAAKI,MAAMG,UAAWZ,IAAI,KACnDJ,EAAAC,EAAAC,cAAA,MAAI0C,UAAU,OAAOnC,KAAKI,MAAMC,SAChCd,EAAAC,EAAAC,cAAA,MAAI0C,UAAU,UAAUnC,KAAKI,MAAME,qBA9DZmC,aCWbC,MATf,WACC,OACCnD,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,QCIiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.5530834a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n    \t<header>\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n\t\t\t\t\talt=\"Problem?\"\r\n\t\t\t\t/>\r\n\t\t\t\t<p>Meme Generator</p>\r\n\t\t\t</header>\r\n\t\t)\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react'\r\n\r\nclass MemeGenerator extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\ttopText: '',\r\n\t\t\tbottomText: '',\r\n\t\t\trandomImg: 'http://i.imgflip.com/1bij.jpg',\r\n\t\t\tallMemeImgs: [],\r\n\t\t}\r\n\t\tthis.handleChange = this.handleChange.bind(this)\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://api.imgflip.com/get_memes')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst {memes} = response.data\r\n\t\t\t\tthis.setState({allMemeImgs: memes})\r\n\t\t\t})\r\n\r\n\r\n\t}\r\n\r\n\thandleChange(event) {\r\n\t\tconst {name, value} = event.target\r\n\t\tthis.setState({ [name]: value })\r\n\t}\r\n\r\n\thandleSubmit(event) {\r\n\t\tevent.preventDefault()\r\n\t\tconst randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n\t\tconst randMemeImg = this.state.allMemeImgs[randNum].url\r\n\t\tthis.setState({randomImg: randMemeImg})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname='topText'\r\n\t\t\t\t\t\tvalue={this.state.topText}\r\n\t\t\t\t\t\tplaceholder='Top Text'\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname='bottomText'\r\n\t\t\t\t\t\tvalue={this.state.bottomText}\r\n\t\t\t\t\t\tplaceholder='Bottom Text'\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<button>Gen</button>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<div className=\"meme\">\r\n\t\t\t\t\t<img align=\"center\" src={this.state.randomImg} alt=\"\" />\r\n\t\t\t\t\t<h2 className=\"top\">{this.state.topText}</h2>\r\n\t\t\t\t\t<h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MemeGenerator","import React from \"react\"\r\nimport Header from './Header'\r\nimport MemeGenerator from './MemeGenerator'\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header />\r\n\t\t\t<MemeGenerator />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}